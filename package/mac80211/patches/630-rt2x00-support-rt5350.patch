Index: compat-wireless-2013-02-22/drivers/net/wireless/rt2x00/rt2800.h
===================================================================
--- compat-wireless-2013-02-22.orig/drivers/net/wireless/rt2x00/rt2800.h	2013-08-09 19:05:30.000000000 +0400
+++ compat-wireless-2013-02-22/drivers/net/wireless/rt2x00/rt2800.h	2013-08-09 19:20:28.000000000 +0400
@@ -69,6 +69,7 @@
 #define RF3322				0x000c
 #define RF3053				0x000d
 #define RF3290				0x3290
+#define RF5350				0x5350
 #define RF5360				0x5360
 #define RF5370				0x5370
 #define RF5372				0x5372
@@ -2238,6 +2239,11 @@
  * delta pwr: [-12;12]
  */
 const u32 generic_tssi_ratio_values[25] = {0};
+const u32 rt5350_tssi_ratio_values[25] = {	955, 1161, 1413, 1718, 2089,
+						2541, 3090, 3758, 4571, 5559,
+						6761, 8222, 10000, 12162, 14791,
+						17989, 21878, 26607, 32359, 39355,
+						47863, 58210, 70795, 86099, 104713 };
 
 /*
  * tssi ratio deltas (used for delta_power calculation)
@@ -2245,7 +2251,13 @@
  * 2nd idx: per mcs delta value
  */
 const int generic_tssi_ratio_deltas[6][16] = {{0}};
-
+const int rt5350_tssi_ratio_deltas[6][16] ={	{ -12, -12, -12, -12 },
+						{ -15, -15, -15, -15, -15, -15, -15, -15 },
+						{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15 ,-15, -15, -15, -15 },
+						{ -15, -15, -15, -15, -15, -16, -16, -16, -16, -16, -16, -16 ,-16, -16, -16, -16 },
+						{ -15, -15, -15, -15, -15, -15, -15, -15 },
+						{ -15, -15, -15, -15, -15, -16, -16, -16 },
+					   };
 /*
  * desired tssi for cck, ofdm, ht
  */
Index: compat-wireless-2013-02-22/drivers/net/wireless/rt2x00/rt2800lib.c
===================================================================
--- compat-wireless-2013-02-22.orig/drivers/net/wireless/rt2x00/rt2800lib.c	2013-08-09 19:05:30.000000000 +0400
+++ compat-wireless-2013-02-22/drivers/net/wireless/rt2x00/rt2800lib.c	2013-08-09 19:29:15.000000000 +0400
@@ -2166,6 +2166,15 @@
 	if (rf->channel <= 14) {
 		int idx = rf->channel-1;
 
+		if (rt2x00_rt(rt2x00dev, RT5350)) {
+			static const char r59_non_bt[] = {0x0b, 0x0b,
+				0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0a,
+				0x0a, 0x09, 0x08, 0x07, 0x07, 0x06};
+
+			rt2800_rfcsr_write(rt2x00dev, 59,
+					   r59_non_bt[idx]);
+		}
+
 		if (test_bit(CAPABILITY_BT_COEXIST, &rt2x00dev->cap_flags)) {
 			if (rt2x00_rt_rev_gte(rt2x00dev, RT5390, REV_RT5390F)) {
 				/* r55/r59 value array of channel 1~14 */
@@ -2247,6 +2256,7 @@
 	case RF3322:
 		rt2800_config_channel_rf3322(rt2x00dev, conf, rf, info);
 		break;
+	case RF5350:
 	case RF5360:
 	case RF5370:
 	case RF5372:
@@ -2260,6 +2270,7 @@
 
 	if (rt2x00_rf(rt2x00dev, RF3290) ||
 	    rt2x00_rf(rt2x00dev, RF3322) ||
+	    rt2x00_rf(rt2x00dev, RF5350) ||
 	    rt2x00_rf(rt2x00dev, RF5360) ||
 	    rt2x00_rf(rt2x00dev, RF5370) ||
 	    rt2x00_rf(rt2x00dev, RF5372) ||
@@ -2390,7 +2401,8 @@
 	/*
 	 * Clear update flag
 	 */
-	if (rt2x00_rt(rt2x00dev, RT3352)) {
+	if (rt2x00_rt(rt2x00dev, RT3352) ||
+	    rt2x00_rt(rt2x00dev, RT5350)) {
 		rt2800_bbp_read(rt2x00dev, 49, &bbp);
 		rt2x00_set_field8(&bbp, BBP49_UPDATE_FLAG, 0);
 		rt2800_bbp_write(rt2x00dev, 49, bbp);
@@ -2402,6 +2414,11 @@
   u32 ratio = 0;
 
   switch(rt2x00dev->chip.rt) {
+	case RT5350:
+                if((delta_power >= -12) && (delta_power <= 12)) {
+                        ratio = rt5350_tssi_ratio_values[delta_power + 12];
+                }
+                break;
 	default:
 		if((delta_power >= -12) && (delta_power <= 12)) {
 			ratio = generic_tssi_ratio_values[delta_power + 12];
@@ -2421,6 +2438,10 @@
   int i;
 
   switch(rt2x00dev->chip.rt) {
+	case RT5350:
+                tssi_ratio_deltas = &rt5350_tssi_ratio_deltas;
+                rt2x00dev->tssi_max = RT5350_TSSI_MAX;
+                break;	
 	default:
 		tssi_ratio_deltas = &generic_tssi_ratio_deltas;
 		rt2x00dev->tssi_max = 0;
@@ -2616,6 +2637,8 @@
 
   desired_tssi = rt2x00dev->desired_tssi->current_value;
   switch (rt2x00dev->chip.rt) {
+	case RT5350:
+		current_tssi = bbp49 * 100000 / (rt2x00dev->tssi_ref);	
 	default:
 		current_tssi = bbp49 * 10000;
 		break;
@@ -2888,8 +2911,11 @@
 	 * expected. We adjust it, based on TSSI reference and boundaries values
 	 * provided in EEPROM.
 	 */
-	delta += rt2800_get_gain_calibration_delta(rt2x00dev);
-
+	if (rt2x00_rt(rt2x00dev, RT5350)) {
+		delta += alt_get_gain_calibration_delta(rt2x00dev);
+	} else {
+		delta += rt2800_get_gain_calibration_delta(rt2x00dev);
+	}
 	/*
 	 * Decrease power according to user settings, on devices with unknown
 	 * maximum tx power. For other devices we take user power_level into
@@ -3068,6 +3094,7 @@
 		rt2800_rfcsr_write(rt2x00dev, 7, rfcsr);
 		break;
 	case RF3290:
+	case RF5350:
 	case RF5360:
 	case RF5370:
 	case RF5372:
@@ -4412,6 +4439,76 @@
 	rt2800_rfcsr_write(rt2x00dev, 31, 0x10);
 }
 
+static void rt2800_init_rfcsr_5350(struct rt2x00_dev *rt2x00dev)
+{
+	rt2800_rfcsr_write(rt2x00dev, 0, 0xf0);
+	rt2800_rfcsr_write(rt2x00dev, 1, 0x23);
+	rt2800_rfcsr_write(rt2x00dev, 2, 0x50);
+	rt2800_rfcsr_write(rt2x00dev, 3, 0x08);
+	rt2800_rfcsr_write(rt2x00dev, 4, 0x49);
+	rt2800_rfcsr_write(rt2x00dev, 5, 0x10);
+	rt2800_rfcsr_write(rt2x00dev, 6, 0xe0);
+	rt2800_rfcsr_write(rt2x00dev, 7, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 8, 0xf1);
+	rt2800_rfcsr_write(rt2x00dev, 9, 0x02);
+	rt2800_rfcsr_write(rt2x00dev, 10, 0x53);
+	rt2800_rfcsr_write(rt2x00dev, 11, 0x4a);
+	rt2800_rfcsr_write(rt2x00dev, 12, 0x46);
+	if(rt2x00dev->spec.clk_is_20mhz)
+		rt2800_rfcsr_write(rt2x00dev, 13, 0x1f);
+	else
+		rt2800_rfcsr_write(rt2x00dev, 13, 0x9f);
+	rt2800_rfcsr_write(rt2x00dev, 14, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 15, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 16, 0xc0);
+	rt2800_rfcsr_write(rt2x00dev, 18, 0x03);
+	rt2800_rfcsr_write(rt2x00dev, 19, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 20, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 21, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 22, 0x20);
+	rt2800_rfcsr_write(rt2x00dev, 23, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 24, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 25, 0x80);
+	rt2800_rfcsr_write(rt2x00dev, 26, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 27, 0x03);
+	rt2800_rfcsr_write(rt2x00dev, 28, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 29, 0xd0);
+	rt2800_rfcsr_write(rt2x00dev, 30, 0x10);
+	rt2800_rfcsr_write(rt2x00dev, 31, 0x80);
+	rt2800_rfcsr_write(rt2x00dev, 32, 0x80);
+	rt2800_rfcsr_write(rt2x00dev, 33, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 34, 0x07);
+	rt2800_rfcsr_write(rt2x00dev, 35, 0x12);
+	rt2800_rfcsr_write(rt2x00dev, 36, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 37, 0x08);
+	rt2800_rfcsr_write(rt2x00dev, 38, 0x85);
+	rt2800_rfcsr_write(rt2x00dev, 39, 0x1b);
+	rt2800_rfcsr_write(rt2x00dev, 40, 0x0b);
+	rt2800_rfcsr_write(rt2x00dev, 41, 0xbb);
+	rt2800_rfcsr_write(rt2x00dev, 42, 0xd5);
+	rt2800_rfcsr_write(rt2x00dev, 43, 0x9b);
+	rt2800_rfcsr_write(rt2x00dev, 44, 0x0c);
+	rt2800_rfcsr_write(rt2x00dev, 45, 0xa6);
+	rt2800_rfcsr_write(rt2x00dev, 46, 0x73);
+	rt2800_rfcsr_write(rt2x00dev, 47, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 48, 0x10);
+	rt2800_rfcsr_write(rt2x00dev, 49, 0x80);
+	rt2800_rfcsr_write(rt2x00dev, 50, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 51, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 52, 0x38);
+	rt2800_rfcsr_write(rt2x00dev, 53, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 54, 0x38);
+	rt2800_rfcsr_write(rt2x00dev, 55, 0x43);
+	rt2800_rfcsr_write(rt2x00dev, 56, 0x82);
+	rt2800_rfcsr_write(rt2x00dev, 57, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 58, 0x39);
+	rt2800_rfcsr_write(rt2x00dev, 59, 0x0b);
+	rt2800_rfcsr_write(rt2x00dev, 60, 0x45);
+	rt2800_rfcsr_write(rt2x00dev, 61, 0xd1);
+	rt2800_rfcsr_write(rt2x00dev, 62, 0x00);
+	rt2800_rfcsr_write(rt2x00dev, 63, 0x00);
+}
+
 static void rt2800_init_rfcsr_5390(struct rt2x00_dev *rt2x00dev)
 {
 	rt2800_rfcsr_write(rt2x00dev, 1, 0x0f);
@@ -4624,6 +4721,9 @@
 	case RT3572:
 		rt2800_init_rfcsr_3572(rt2x00dev);
 		break;
+	case RT5350:
+		rt2800_init_rfcsr_5350(rt2x00dev);
+		break;
 	case RT5390:
 		rt2800_init_rfcsr_5390(rt2x00dev);
 		break;
@@ -5182,6 +5282,7 @@
 	case RF3290:
 	case RF3320:
 	case RF3322:
+	case RF5350:
 	case RF5360:
 	case RF5370:
 	case RF5372:
@@ -5544,7 +5645,8 @@
 		   rt2x00_rf(rt2x00dev, RF5392)) {
 		spec->num_channels = 14;
 		spec->channels = rf_vals_3x;
-	} else if (rt2x00_rf(rt2x00dev, RF3322)) {
+	} else if (rt2x00_rf(rt2x00dev, RF3322) ||
+		   rt2x00_rf(rt2x00dev, RF5350)) {
 		spec->num_channels = 14;
 		if (spec->clk_is_20mhz)
 			spec->channels = rf_vals_xtal20mhz_3x;
@@ -5631,6 +5733,7 @@
 	case RF3320:
 	case RF3052:
 	case RF3290:
+	case RF5350:
 	case RF5360:
 	case RF5370:
 	case RF5372:
Index: compat-wireless-2013-02-22/drivers/net/wireless/rt2x00/rt2x00.h
===================================================================
--- compat-wireless-2013-02-22.orig/drivers/net/wireless/rt2x00/rt2x00.h	2013-08-09 19:05:30.000000000 +0400
+++ compat-wireless-2013-02-22/drivers/net/wireless/rt2x00/rt2x00.h	2013-08-09 19:21:36.000000000 +0400
@@ -192,6 +192,7 @@
 #define RT3572		0x3572
 #define RT3593		0x3593
 #define RT3883		0x3883	/* WSOC */
+#define RT5350		0x5350  /* WSOC 2.4GHz */
 #define RT5390		0x5390  /* 2.4GHz */
 #define RT5392		0x5392  /* 2.4GHz */
 
@@ -1054,6 +1055,7 @@
 	u16 tssi_ref;
 
 	u8 tssi_max;
+#define RT5350_TSSI_MAX 0x7c
 };
 
 struct rt2x00_bar_list_entry {
